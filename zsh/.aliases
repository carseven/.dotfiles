# ALIAS

# ZSHRC CONFIG
alias update="source ~/.zshrc"
alias cdot="code ~/.dotfiles"
alias time_zsh="time zsh -i -c exit"

# NAVEGACION
alias ...="cd ../.."
alias ls="lsd --group-dirs=first"
alias ll="lsd -lh --group-dirs=first --sort=size"
alias lsa="lsd -a --group-dirs=first"
alias lla="lsd -lha --group-dirs=first --sort=size"
alias tree="lsd -a --tree"

# CAT/BAT
alias cat="bat"
alias catnl="bat --paging=never"

# CODE
alias c="code ."

# PYTHON VENV
alias create_venv="virtualenv .venv" # pip3 install virtualenv to install global dependency
alias venv="source source .venv/bin/activate"
alias dvenv="deactivate &> /dev/null"
alias pip_freeze="pip3 freeze > requirement.txt"
alias pip_freeze_install="pip3 install -r requirements.txt"

# GO
function go_update_last() {
  # Get last version
  go_lastest_version=$(curl -s https://go.dev/VERSION\?m\=text | head -n 1)

  # Check if go is installed.
  # If it is installed, check if it is the latest version.
  if ! command -v go &> /dev/null; then
    echo "Go is not installed"
  else
    current_go_version=$(go version | awk '{print $3}')
    echo "Go installed version: $current_go_version"
    if [[ "$current_go_version" == "$go_lastest_version" ]]; then
      echo "You are already using the latest version of Go"
      return
    fi
  fi


  # Download the latest version of Go
  go_download_url="https://dl.google.com/go/$go_lastest_version.linux-amd64.tar.gz"
  echo "Downloading go version $go_lastest_version from $go_download_url"
  wget $go_download_url -O /tmp/go.tar.gz

  # Remove old version
  if [[ -d "/usr/local/go" ]]; then
    echo "Removing old version of Go"
    sudo rm -rf /usr/local/go
  fi

  # Install new version
  echo "Installing Go version $go_lastest_version"
  sudo tar -C /usr/local -xzf /tmp/go.tar.gz

  # Remove downloaded file
  echo "Removing downloaded tar file"
  rm /tmp/go.tar.gz

  echo "Go version $go_lastest_version installed!"
}

function go_remove_version() {
  sudo rm -rf /usr/local/go
}

# NPM
alias nv="nvm use --lts" # Especificar una version por defecto. nvm alias default 16.16.0
alias ns="npm start"
alias ni="npm install"
alias ncomplex="npx code-complexity . --filter '**/*.ts' --limit 10 --sort score"
alias rmnode="find . -name 'node_modules' -type d -prune -print -exec rm -rf '{}' \;"
alias npkill="npx npkill"


# PNPM
alias pn="pnpm"

# All packages
function p() {
  if [[ -f bun.lockb ]]; then
    command bun "$@"
  elif [[ -f yarn.lock ]]; then
    command yarn $@
  elif [[ -f package-lock.json ]]; then
    command npm $@
  elif [[ -f pnpm-lock.yaml ]]; then
    command pnpm $@
  else
    command npm $@
  fi
}

# System utilities
alias myip="curl http://ipecho.net/plain; echo"
alias usage="du -h -d1"
alias runport="lsof -i"

# GIT
alias gconfig="git config -l" 
alias gc="git commit -m"
alias gs="git status"
alias gss='git status --short'
alias gd="git diff"
alias gdiff="git diff"
alias ga="git add"
alias gaa="git add ."
alias gf="git fetch"
alias gfa="git fetch --all"
alias gpush="git push"
alias gpull="git pull"
alias gpushup="git push --set-upstream origin HEAD"
alias gpull="git pull"
alias greset="git reset HEAD~" # reset last commit
alias gw="git switch"
alias gwc="git switch -c"
alias gswitch="git branch | fzf | xargs -I_ git switch _"
alias gbranchdel="git branch | fzf | xargs -I_ git branch -d _"
alias glog='git log --graph --oneline --decorate --all'
alias gg='lazygit'
alias gsearch="git log --decorate --all --oneline -S"
alias gpipe="  git commit --allow-empty -m 'Trigger CI/CD'"
function gbat() { git diff --name-only --diff-filter=d | xargs bat --diff }

# FZF
# Open in vscode dev repositories
alias dev="ls ~/dev | fzf | xargs -I_ code ~/dev/_"
alias cf="find ~ ~/dev -mindepth 1 -maxdepth 1 -type d | fzf | xargs -I_ code _"
bindkey -s ^f "$HOME/.local/bin/scripts/tmux-session\n" # Bindea cntrl + f a lanzar el string
alias hfind="history | fzf"
alias afind="alias | fzf"
alias most_used="history  | awk '{print $2}' | sort | uniq -c | sort"

# Preview files with bat
function preview() {
        if [ "$1" = "h" ]; then
                fzf -m --reverse --preview-window down:20 --preview '[[ $(file --mime {}) =~ binary ]] &&
                        echo {} is a binary file ||
                         (bat --style=numbers --color=always {} ||
                          highlight -O ansi -l {} ||
                          coderay {} ||
                          rougify {} ||
                          cat {}) 2> /dev/null | head -500'
 
        else
                fzf -m --preview '[[ $(file --mime {}) =~ binary ]] &&
                                 echo {} is a binary file ||
                                 (bat --style=numbers --color=always {} ||
                                  highlight -O ansi -l {} ||
                                  coderay {} ||
                                  rougify {} ||
                                  cat {}) 2> /dev/null | head -500'
        fi
}

# Set man colors
function man() {
    env \
    LESS_TERMCAP_mb=$'\e[01;31m' \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}

function addToPath() {
    if [[ "$PATH" != *"$1"* ]]
    then 
        export PATH=$PATH:$1
    fi
}

# Mac OS X platform
if [[ "$(uname)" == "Darwin" ]] 
then
  function update-macos() {
    # Close any open System Preferences panes, to prevent them from overriding
    # settings we’re about to change
    osascript -e 'tell application "System Preferences" to quit'

    # Ask for the administrator password upfront
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until `.setup` has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    # Install all recommended available updates and restart if needed (macos)
    sudo softwareupdate --install --all --restart --recommended
  }

  function update-xcode() {
    # Install or update xcode development dependencies
    xcode-select --install
  }
fi
